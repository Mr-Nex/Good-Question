## Count all inversion pairs in ans array.
i.e., a[i] > a[j]       where, i<j




public class Solve{	
	
    public static void main(String[] args) throws IOException {
    	
    	Scanner sc = new Scanner(System.in);
    	
		int T = sc.nextInt();
		
		for(int jj=0;jj<T;jj++) {
			int[] arr = {5,3,2,4,1};
			int[] tmp = new int[arr.length];
			int ans = sort(arr,tmp,0,arr.length-1);
			
			System.out.println(ans);
		}
    }

	static int merge(int[] arr, int[] tmp, int start, int mid, int end) {
		
		int i = start, j = mid, k = start;
		int inv = 0;
		
		while(i<=mid-1 && j<=end) {
			if(arr[i] <= arr[j]) {
				tmp[k++] = arr[i++];
			}else {
				tmp[k++] = arr[j++];
				
				inv += (mid-i);
			}
		}
		
		while(i<=mid-1) {
			tmp[k++] = arr[i++];
		}
		while(j<=end) {
			tmp[k++] = arr[j++];
		}
		
		for(int x=start;x<=end;x++) {
			arr[x] = tmp[x];
		}
		
		return inv;
		
	}
	
	static int sort(int[] arr, int[] tmp, int start, int end) {
		int mid = (start+end)/2;
		int inv = 0;
		if(start<end) {
			inv += sort(arr,tmp,start,mid);
			inv += sort(arr,tmp,mid+1,end);
			inv += merge(arr,tmp,start,mid+1,end);
		}
		return inv;
	}
}